newsSample<-sample(textLinesNews, length(textLinesNews)*0.1)
annotation<-annotate(newsSample, list(Maxent_Sent_Token_Annotator(),Maxent_Word_Token_Annotator()))
pos_annotation=annotate(newsSample, Maxent_POS_Tag_Annotator(), annotation)
library(tidytext)
library(tidyverse)
library(tm)
library(openNLP)
library(openNLPdata)
library(caret)
newsSample<-sample(textLinesNews, length(textLinesNews)*0.05)
annotation<-annotate(newsSample, list(Maxent_Sent_Token_Annotator(),Maxent_Word_Token_Annotator()))
pos_annotation=annotate(newsSample, Maxent_POS_Tag_Annotator(), annotation)
library(tidytext)
library(tidyverse)
library(tm)
library(openNLP)
library(openNLPdata)
library(caret)
newsSample<-sample(textLinesNews, length(textLinesNews)*0.02)
annotation<-annotate(newsSample, list(Maxent_Sent_Token_Annotator(),Maxent_Word_Token_Annotator()))
pos_annotation=annotate(newsSample, Maxent_POS_Tag_Annotator(), annotation)
library(tidytext)
library(tidyverse)
library(tm)
library(openNLP)
library(openNLPdata)
library(caret)
newsSample<-sample(textLinesNews, length(textLinesNews)*0.02)
annotation<-annotate(newsSample, list(Maxent_Sent_Token_Annotator(),Maxent_Word_Token_Annotator()))
pos_annotation=annotate(newsSample, Maxent_POS_Tag_Annotator(), annotation)
word_pos=subset(pos_annotation, type=='word')
pos_tags<-sapply(word_pos$features, '[[', "POS")
pos_tags<-mapvalues(pos_tags, c("NNP", "NNS","NNP", "NNPS", "JJR", "JJS", "PRP$", "RBR", "RBS", "VBD", "VBN", "VBG", "VBP", "VBZ", "PDT", "WDT", "WP$","WRB"), c("NN", "NN", "NN", "NN", "JJ", "JJ", "PRP", "RB", "RB", "VB", "VB", "VB", "VB", "VB", "DT", "DT", "WP", "RB"))
#simplify
tags<-paste(pos_tags, collapse=" ")
tags<-strsplit(tags, "[[:punct:]]")
tags<-unlist(tags)
#tags<-sapply(tags, FUN=strsplit, split=" ")
tags<-as.data.frame(tags)
tags<-unnest_tokens(tags, tag, tags, token="ngrams", n=5)%>%separate(tag, c("tag1", "tag2", "tag3", "tag4", "tag5"), sep = " ", remove=FALSE)
#tags<-sapply(tags, FUN=strsplit, split=" ")
tags$tag1=as.factor(tags$tag1)
tags$tag2=as.factor(tags$tag2)
tags$tag3=as.factor(tags$tag3)
tags$tag4=as.factor(tags$tag4)
tags$tag5=as.factor(tags$tag5)
tags<-select(tags, -c("tag"))
ind<-sample(2, nrow(tags), replace=TRUE, prob=c(0.7,0.3))
tags_train=tags[ind==1,]
tags_test=tags[ind==2,]
newData<-data.frame("tag1"=as.factor("nn"), "tag2"=as.factor("dt"), "tag3"=as.factor("nn"), "tag4"=as.factor("dt"))
model<-train(tag5~., method="rf", data=tags_train)
library(tidytext)
library(tidyverse)
library(tm)
library(openNLP)
library(openNLPdata)
library(caret)
newsSample<-sample(textLinesNews, length(textLinesNews)*0.02)
annotation<-annotate(newsSample, list(Maxent_Sent_Token_Annotator(),Maxent_Word_Token_Annotator()))
pos_annotation=annotate(newsSample, Maxent_POS_Tag_Annotator(), annotation)
word_pos=subset(pos_annotation, type=='word')
pos_tags<-sapply(word_pos$features, '[[', "POS")
pos_tags<-mapvalues(pos_tags, c("NNP", "NNS","NNP", "NNPS", "JJR", "JJS", "PRP$", "RBR", "RBS", "VBD", "VBN", "VBG", "VBP", "VBZ", "PDT", "WDT", "WP$","WRB"), c("NN", "NN", "NN", "NN", "JJ", "JJ", "PRP", "RB", "RB", "VB", "VB", "VB", "VB", "VB", "DT", "DT", "WP", "RB"))
#simplify
tags<-paste(pos_tags, collapse=" ")
tags<-strsplit(tags, "[[:punct:]]")
tags<-unlist(tags)
#tags<-sapply(tags, FUN=strsplit, split=" ")
tags<-as.data.frame(tags)
tags<-unnest_tokens(tags, tag, tags, token="ngrams", n=5)%>%separate(tag, c("tag1", "tag2", "tag3", "tag4", "tag5"), sep = " ", remove=FALSE)
#tags<-sapply(tags, FUN=strsplit, split=" ")
tags$tag1=as.factor(tags$tag1)
tags$tag2=as.factor(tags$tag2)
tags$tag3=as.factor(tags$tag3)
tags$tag4=as.factor(tags$tag4)
tags$tag5=as.factor(tags$tag5)
tags<-select(tags, -c("tag"))
ind<-sample(2, nrow(tags), replace=TRUE, prob=c(0.7,0.3))
tags_train=tags[ind==1,]
tags_test=tags[ind==2,]
newData<-data.frame("tag1"=as.factor("nn"), "tag2"=as.factor("dt"), "tag3"=as.factor("nn"), "tag4"=as.factor("dt"))
model<-train(tag5~., method="rf", data=tags_train)
shiny::runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
install.packages("shinythemes")
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
shiny::runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
head(model)
model<-getModel()
head(model)
model<-setkey(model,relativeFrequency, word3, word2, word1)
library(data.table)
model<-setkey(model,relativeFrequency, word3, word2, word1)
head(model)
wordCloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word, freq=wordcloudBase$frequency, min.freq=1, scale = c(4, 0.2), max.words=80, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word, freq=wordcloudBase$frequency, min.freq=1, scale = c(4, 0.2), max.words=80, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloud(words=wordcloudBase$word, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=80, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
head(wordcloudBase)
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=80, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=200, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
wordcloud(words=wordcloudBase$word, freq=wordcloudBase$frequency, min.freq=1, scale = c(4, 0.2), max.words=500, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word, freq=wordcloudBase$frequency, min.freq=1, scale = c(4, 0.2), max.words=500, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=500, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=500, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=500, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(10, 0.5), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(10, 1), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(10, 2), max.words=500, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 2), max.words=500, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 0.5), max.words=500, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 0.5), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 0.4), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 0.3), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(9, 0.3), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 0.35), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Dark2"))
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 0.35), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 0.35), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Paired"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 0.35), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "PuBu"))
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(8, 0.35), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "PuOr"))
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
shiny::runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
shiny::runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
model<-getModel()
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
library(wordcloud)
#model<-getModel()
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Set1"))
library(wordcloud)
#model<-getModel()
wordcloudBase<-subset(model, word1=='' & word2=='' & word3=='')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=brewer.pal(8, "Blues"))
install.packages("wesanderson")
library(wesanderson)
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=wes_palette("Darjeeling2", n, type = "continuous))
)
)
""
""
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=wes_palette("Darjeeling2", n, type = "continuous"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=wes_palette("Darjeeling2", 5, type = "continuous"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=wes_palette("FantasticFox1", 5, type = "continuous"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=wes_palette("Cavalcanti1", 5, type = "continuous"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=wes_palette("Darjeeling1", 5, type = "continuous"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors="deepskyblue")
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=c("deepskyblue", "deepskyblue1", "deepskyblue2", "deepskyblue3", "deepskyblue4"))
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=c("#E95420", "deepskyblue1", "deepskyblue2", "deepskyblue3", "deepskyblue4"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=c("deepskyblue1", "deepskyblue2", "deepskyblue3", "deepskyblue4", "#E95420"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=c("#EFB73E", "#17A2B8", "deepskyblue3", "deepskyblue4", "#E95420"))
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=c("#17A2B8", "deepskyblue3", "deepskyblue4", "#E95420"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=c("#17A2B8", "deepskyblue3", "deepskyblue4", "#E95420", "#C34113"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=c("#17A2B8", "deepskyblue3", "#E95420", "#C34113"))
wordcloud(words=wordcloudBase$word4, freq=wordcloudBase$relativeFrequency, min.freq=1, scale = c(4, 0.2), max.words=1000, random.order=FALSE,rot.per=0.35, colors=c("#17A2B8", "#E95420", "#C34113"))
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
runApp('C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord')
setwd("C:/Users/Jaqueline.Wilde/priv-repos/NLPAssignment/NextWord")
model <- readRDS("model.rds")
unigrams<-subset(model, word1=='' & word2=='' and word3=='')
unigrams<-subset(model, word1=='' & word2=='' & word3=='')
arrange(unigrams, desc(relativeFrequency))
library(dplyr)
unigrams<-arrange(unigrams, desc(relativeFrequency))
unigrams<-unique(unigrams)
head(unigrams)
head(unigrams, n=100)
unigrams<-head(unigrams, n=100)
non_unigrams<-subset(model, word1=='' | word2=='' | word3=='')
unigrams<-subset(model, word1=='' & word2=='' & word3=='')
non_unigrams<-subset(model, word1<>'' | word2<>'' | word3<>'')
non_unigrams<-subset(model, word1!='' | word2!='' | word3!='')
unigrams<-subset(model, word1=='' & word2=='' & word3=='')
new_model<-non_unigrams
unigrams<-head(unigrams, n=100)
new_mode<-rbind(non_unigrams, unigrams)
new_mode<-new_model
bigrams<-subset(model, word1=='' & word2=='' & word3!='')
head(bigrams)
head(bigrams, n=20)
head(bigrams, n=50)
head(bigrams, n=100)
bigrams<-arrange(bigrams, desc(relativeFrequency))
head(bigrams, n=100)
bigrams_test<-group_by(bigrams, word3)
head(bigrams_test)
bigrams_test<-top_n(bigrams_test, relativeFrequency)
bigrams_test<-top_n(bigrams_test, 50, relativeFrequency)
head(bigrams_test)
bigrams_test<-arrange(bigrams_test, word3)
head(bigrams_test)
head(bigrams_test, n=100)
bigrams_test<-ungroup(bigrams_test)
head(bigrams_test, n=100)
head(bigrams_test, n=20)
head(bigrams_test, n=60)
head(bigrams_test, n=30)
unigrams<-subset(model, word1=='' & word2=='' & word3=='')
unigrams<-head(unigrams, n=50)
bigrams<-subset(model, word1=='' & word2=='' & word3!='') %>% group_by(word3) %>% top_n(n=20, relativeFrequency)%>%ungroup
head(bigrams)
head(bigrams, n=20)
tail(bigrams)
tail(bigrams, n=50)
tail(bigrams, n=100)
subset(bigrams, word3=='zumba')
trigrams<-subset(model, word1=='' & word2!='' & word3!='') %>% group_by(word2, word3) %>% top_n(n=20, relativeFrequency)%>%ungroup
head(trigrams)
head(trigrams, n=100)
tail(trigrams, n=100)
fourgrams<-subset(model, word1!='' & word2!='' & word3!='') %>% group_by(word1, word2, word3) %>% top_n(n=20, relativeFrequency)%>%ungroup
transition<-rbind(unigrams, bigrams, trigrams, fourgrams)
unigrams<-subset(model, word1=='' & word2=='' & word3=='')
unigrams<-head(unigrams, n=20)
bigrams<-subset(model, word1=='' & word2=='' & word3!='') %>% group_by(word3) %>% top_n(n=10, relativeFrequency)%>%ungroup
trigrams<-subset(model, word1=='' & word2!='' & word3!='') %>% group_by(word2, word3) %>% top_n(n=10, relativeFrequency)%>%ungroup
fourgrams<-subset(model, word1!='' & word2!='' & word3!='') %>% group_by(word1, word2, word3) %>% top_n(n=10, relativeFrequency)%>%ungroup
transition<-rbind(unigrams, bigrams, trigrams, fourgrams)
setkey(transition,word1, word2,word3, relativeFrequency)
library(data.table)
setkey(transition,word1, word2,word3, relativeFrequency)
saveRDS(transition, "model.rds")
#saveRDS(transition, "model.rds")
my_model <- readRDS("model.rds")
library(dplyr)
library(tidyverse)
clean_input<-function(input){
convertedInputVec<-strsplit(input, "[[:punct:]]")[[1]]
convertedInput<-convertedInputVec[length(convertedInputVec)]
convertedInput<-tolower(convertedInput)%>%str_squish()
return(convertedInput)
}
getInputVector<-function(input){
if(input==''){
inputVector=c('', '', '')
}
else{
inputVectorPrep<-strsplit(input, " ")[[1]]
if(length(inputVectorPrep)>=3){
inputVector<-tail(inputVectorPrep, 3)
}
else{
if(length(inputVectorPrep)==3){
inputVector<-inputVectorPrep
}else{
if(length(inputVectorPrep)==2){          inputVector=c('', inputVectorPrep)
}else{
inputVector=c('', '', inputVectorPrep)
}
}
}
}
inputVector
}
getNextWord<-function(input, model, numberOfWords) {
clean_input<-cleanInput(input)
output=""
inputVector<-getInputVector(clean_input)
#use whole info
wordsWholeInfo=arrange(subset(model, word1==inputVector[1] & word2==inputVector[2] & word3==inputVector[3]), desc(relativeFrequency))$word4
output=head(wordsWholeInfo, n=numberOfWords)
if(length(output)<numberOfWords){
wordsWithout1=unique(arrange(subset(model, word1=='' & word2==inputVector[2] & word3==inputVector[3]), desc(relativeFrequency))$word4)
wordsWithout1=wordsWithout1[!(wordsWithout1 %in% output)]
output=c(output, wordsWithout1)
if(length(output) < numberOfWords){
wordsWithout1And2=unique(arrange(subset(model, word3==inputVector[3]), desc(relativeFrequency))$word4)
wordsWithout1And2=wordsWithout1And2[!(wordsWithout1And2 %in% output)]
output=c(output, wordsWithout1And2)
if(length(output) < numberOfWords){
wordsWithoutAll=unique(arrange(model, desc(relativeFrequency))$word4)
wordsWithoutAll=wordsWithoutAll[!(wordsWithoutAll %in% output)]
output=c(output, wordsWithoutAll)
}
}
}
return(head(output, n=numberOfWords))
}
unigram_start <- Sys.time()
getNextWord("", my_model, 20)
library(dplyr)
library(tidyverse)
cleanInput<-function(input){
convertedInputVec<-strsplit(input, "[[:punct:]]")[[1]]
convertedInput<-convertedInputVec[length(convertedInputVec)]
convertedInput<-tolower(convertedInput)%>%str_squish()
return(convertedInput)
}
getInputVector<-function(input){
if(input==''){
inputVector=c('', '', '')
}
else{
inputVectorPrep<-strsplit(input, " ")[[1]]
if(length(inputVectorPrep)>=3){
inputVector<-tail(inputVectorPrep, 3)
}
else{
if(length(inputVectorPrep)==3){
inputVector<-inputVectorPrep
}else{
if(length(inputVectorPrep)==2){          inputVector=c('', inputVectorPrep)
}else{
inputVector=c('', '', inputVectorPrep)
}
}
}
}
inputVector
}
getNextWord<-function(input, model, numberOfWords) {
clean_input<-cleanInput(input)
output=""
inputVector<-getInputVector(clean_input)
#use whole info
wordsWholeInfo=arrange(subset(model, word1==inputVector[1] & word2==inputVector[2] & word3==inputVector[3]), desc(relativeFrequency))$word4
output=head(wordsWholeInfo, n=numberOfWords)
if(length(output)<numberOfWords){
wordsWithout1=unique(arrange(subset(model, word1=='' & word2==inputVector[2] & word3==inputVector[3]), desc(relativeFrequency))$word4)
wordsWithout1=wordsWithout1[!(wordsWithout1 %in% output)]
output=c(output, wordsWithout1)
if(length(output) < numberOfWords){
wordsWithout1And2=unique(arrange(subset(model, word3==inputVector[3]), desc(relativeFrequency))$word4)
wordsWithout1And2=wordsWithout1And2[!(wordsWithout1And2 %in% output)]
output=c(output, wordsWithout1And2)
if(length(output) < numberOfWords){
wordsWithoutAll=unique(arrange(model, desc(relativeFrequency))$word4)
wordsWithoutAll=wordsWithoutAll[!(wordsWithoutAll %in% output)]
output=c(output, wordsWithoutAll)
}
}
}
return(head(output, n=numberOfWords))
}
unigram_start <- Sys.time()
getNextWord("", my_model, 10)
library(dplyr)
library(tidyverse)
cleanInput<-function(input){
convertedInputVec<-strsplit(input, "[[:punct:]]")[[1]]
convertedInput<-convertedInputVec[length(convertedInputVec)]
convertedInput<-tolower(convertedInput)%>%str_squish()
return(convertedInput)
}
getInputVector<-function(input){
if(length(input)==0){
inputVector=c('', '', '')
}
else{
inputVectorPrep<-strsplit(input, " ")[[1]]
if(length(inputVectorPrep)>=3){
inputVector<-tail(inputVectorPrep, 3)
}
else{
if(length(inputVectorPrep)==3){
inputVector<-inputVectorPrep
}else{
if(length(inputVectorPrep)==2){          inputVector=c('', inputVectorPrep)
}else{
inputVector=c('', '', inputVectorPrep)
}
}
}
}
inputVector
}
getNextWord<-function(input, model, numberOfWords) {
cleanInput<-cleanInput(input)
output=""
inputVector<-getInputVector(cleanInput)
#use whole info
wordsWholeInfo=arrange(subset(model, word1==inputVector[1] & word2==inputVector[2] & word3==inputVector[3]), desc(relativeFrequency))$word4
output=head(wordsWholeInfo, n=numberOfWords)
if(length(output)<numberOfWords){
wordsWithout1=unique(arrange(subset(model, word1=='' & word2==inputVector[2] & word3==inputVector[3]), desc(relativeFrequency))$word4)
wordsWithout1=wordsWithout1[!(wordsWithout1 %in% output)]
output=c(output, wordsWithout1)
if(length(output) < numberOfWords){
wordsWithout1And2=unique(arrange(subset(model, word3==inputVector[3]), desc(relativeFrequency))$word4)
wordsWithout1And2=wordsWithout1And2[!(wordsWithout1And2 %in% output)]
output=c(output, wordsWithout1And2)
if(length(output) < numberOfWords){
wordsWithoutAll=unique(arrange(model, desc(relativeFrequency))$word4)
wordsWithoutAll=wordsWithoutAll[!(wordsWithoutAll %in% output)]
output=c(output, wordsWithoutAll)
}
}
}
return(head(output, n=numberOfWords))
}
unigram_start <- Sys.time()
getNextWord("", transition, 20)
unigram_end <- Sys.time()
bigram_start <- Sys.time()
getNextWord("I", transition, 20)
bigram_end <- Sys.time()
trigram_start <- Sys.time()
getNextWord("I just", transition, 20)
trigram_end <- Sys.time()
numberOfWords_10_start<-Sys.time()
getNextWord("I just", transition, 40)
numberOfwords_10_end<-Sys.time()
numberOfWords_5_start<-Sys.time()
getNextWord("I just", transition, 60)
numberOfwords_5_end<-Sys.time()
times_dt<-c(unigram_end-unigram_start, bigram_end-bigram_start, trigram_end-trigram_start, numberOfwords_10_end-numberOfWords_10_start, numberOfwords_5_end-numberOfWords_5_start)
times_dt
unigram_start <- Sys.time()
getNextWord("", my_model, 10)
unigram_end <- Sys.time()
bigram_start <- Sys.time()
getNextWord("I", my_model, 10)
bigram_end <- Sys.time()
trigram_start <- Sys.time()
getNextWord("I just", my_model, 10)
trigram_end <- Sys.time()
times_df<-c(unigram_end-unigram_start, bigram_end-bigram_start, trigram_end-trigram_start)
times_df
